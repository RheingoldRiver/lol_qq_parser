# generated by datamodel-codegen:
#   filename:  8108.json
#   timestamp: 2022-01-06T06:36:07+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel


class TrinketItem(BaseModel):
    itemId: int
    itemName: str
    itemIcon: str


class Item(BaseModel):
    itemId: int
    itemName: str
    itemIcon: str


class PerkRune(BaseModel):
    styleName: str
    slotName: str
    runeName: str
    runeId: int


class BattleDetail(BaseModel):
    kills: int
    death: int
    assist: int
    kda: float
    highestKillStreak: int
    highestMultiKill: int


class DamageDetail(BaseModel):
    heroDamage: float
    heroPhysicalDamage: float
    heroMagicalDamage: float
    heroTrueDamage: float
    totalDamage: float
    totalPhysicalDamage: float
    totalMagicalDamage: float
    totalTrueDamage: float
    highestCritDamage: int


class DamageTakenDetail(BaseModel):
    restoreLife: int
    damageTaken: float
    physicalDamageTaken: float
    magicalDamageTaken: float
    trueDamageTaken: float


class OtherDetail(BaseModel):
    golds: int
    turretAmount: int
    creepsKilled: int
    deathTime: int
    level: int
    firstBlood: bool
    firstTurret: bool
    firstTurretKill: bool
    firstTurretAssist: bool
    spentGold: int
    totalNeutralMinKilled: float
    totalMinKilledYourJungle: float
    totalMinKilledEnemyJungle: float


class VisionDetail(BaseModel):
    wardPlaced: int
    wardKilled: int
    visionScore: float
    controlWardPurchased: int


class PlayerInfo(BaseModel):
    playerId: int
    playerName: str
    playerLocation: str
    playerAvatar: str
    heroId: int
    spell1Name: str
    spell1Id: int
    spell2Name: str
    spell2Id: int
    accountId: int
    trinketItem: TrinketItem
    items: List[Item]
    minionKilled: int
    perkRunes: List[PerkRune]
    battleDetail: BattleDetail
    damageDetail: DamageDetail
    DamageTakenDetail: DamageTakenDetail
    otherDetail: OtherDetail
    visionDetail: VisionDetail


class TeamInfo(BaseModel):
    teamId: int
    kills: int
    baronAmount: int
    dragonAmount: int
    turretAmount: int
    golds: int
    banHeroList: List[int]
    playerInfos: List[PlayerInfo]
    isFirstRiftHerald: bool
    isFirstInhibitor: bool
    isFirstTurret: bool
    baronIncome: List[int]
    inhibitKills: int
    teamSide: str


class MatchInfo(BaseModel):
    bo: int
    teamAId: int
    teamBId: int
    matchStartTime: str
    matchEndTime: str
    matchWin: int
    matchStatus: int
    blueTeam: int
    teamInfos: List[TeamInfo]
    gameTime: int


class Data(BaseModel):
    matchId: int
    matchName: str
    seasonId: int
    seasonName: str
    stageId: int
    stageName: str
    gameMode: str
    matchTime: str
    matchStatus: int
    matchWin: int
    teamAId: int
    teamAName: str
    teamAScore: int
    teamBId: int
    teamBName: str
    teamBScore: int
    matchInfos: List[MatchInfo]


class Model(BaseModel):
    data: Data
    success: bool
